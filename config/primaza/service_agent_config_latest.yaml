apiVersion: v1
kind: Namespace
metadata:
  name: services
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: services/serving-cert
    controller-gen.kubebuilder.io/version: v0.11.3
  name: registeredservices.primaza.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: webhook-service
          namespace: services
          path: /convert
      conversionReviewVersions:
      - v1
  group: primaza.io
  names:
    kind: RegisteredService
    listKind: RegisteredServiceList
    plural: registeredservices
    singular: registeredservice
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: the state of the RegisteredService
      jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: RegisteredService is the Schema for the registeredservices API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RegisteredServiceSpec defines the desired state of RegisteredService
            properties:
              constraints:
                description: Constraints defines under which circumstances the RegisteredService
                  may be used.
                properties:
                  environments:
                    description: Environments defines in which environments the RegisteredService
                      may be used.
                    items:
                      type: string
                    type: array
                type: object
              healthcheck:
                description: HealthCheck defines a health check for the underlying
                  service.
                properties:
                  container:
                    description: Container defines a container that will run a check
                      against the ServiceEndpointDefinition to determine connectivity
                      and access.
                    properties:
                      command:
                        description: Command to execute in the container to run the
                          test
                        type: string
                      image:
                        description: Container image with the client to run the test
                        type: string
                    required:
                    - command
                    - image
                    type: object
                required:
                - container
                type: object
              serviceClassIdentity:
                description: ServiceClassIdentity defines a set of attributes that
                  are sufficient to identify a service class.  A ServiceClaim whose
                  ServiceClassIdentity field is a subset of a RegisteredService's
                  keys can claim that service.
                items:
                  description: ServiceClassIdentityItem defines an attribute that
                    is necessary to identify a service class.
                  properties:
                    name:
                      description: Name of the service class identity attribute.
                      type: string
                    value:
                      description: Value of the service class identity attribute.
                      type: string
                  required:
                  - name
                  - value
                  type: object
                type: array
              serviceEndpointDefinition:
                description: ServiceEndpointDefinition defines a set of attributes
                  sufficient for a client to establish a connection to the service.
                items:
                  description: ServiceEndpointDefinitionItem defines an attribute
                    that is necessary for a client to connect to a service
                  properties:
                    name:
                      description: Name of the service endpoint definition attribute.
                      type: string
                    value:
                      description: Value of the service endpoint definition attribute.
                        It is mutually exclusive with ValueFromSecret.
                      type: string
                    valueFromSecret:
                      description: Value reference of the service endpoint definition
                        attribute. It is mutually exclusive with Value
                      properties:
                        key:
                          description: Key of the secret reference field
                          type: string
                        name:
                          description: Name of the secret reference
                          type: string
                      required:
                      - key
                      - name
                      type: object
                  required:
                  - name
                  type: object
                type: array
              sla:
                description: SLA defines the support level for this service.
                type: string
            required:
            - serviceClassIdentity
            - serviceEndpointDefinition
            type: object
          status:
            description: RegisteredServiceStatus defines the observed state of RegisteredService.
            properties:
              state:
                description: State describes the current state of the service.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: services/serving-cert
    controller-gen.kubebuilder.io/version: v0.11.3
  name: serviceclasses.primaza.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: webhook-service
          namespace: services
          path: /convert
      conversionReviewVersions:
      - v1
  group: primaza.io
  names:
    kind: ServiceClass
    listKind: ServiceClassList
    plural: serviceclasses
    singular: serviceclass
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ServiceClass is the Schema for the serviceclasses API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceClassSpec defines the desired state of ServiceClass
            properties:
              constraints:
                description: Constraints defines under which circumstances the ServiceClass
                  may be used.
                properties:
                  environments:
                    description: Environments defines the environments that the RegisteredService
                      may be used in.
                    items:
                      type: string
                    type: array
                type: object
              healthCheck:
                description: HealthCheck sets the default health check for generated
                  registered services
                properties:
                  container:
                    description: Container defines a container that will run a check
                      against the ServiceEndpointDefinition to determine connectivity
                      and access.
                    properties:
                      command:
                        description: Command to execute in the container to run the
                          test
                        type: string
                      image:
                        description: Container image with the client to run the test
                        type: string
                    required:
                    - command
                    - image
                    type: object
                required:
                - container
                type: object
              resource:
                description: Resource defines the resource type to be used to convert
                  into Registered Services
                properties:
                  apiVersion:
                    description: APIVersion of the underlying service resource
                    type: string
                  kind:
                    description: Kind of the underlying service resource
                    type: string
                  serviceEndpointDefinitionMappings:
                    description: ServiceEndpointDefinitionMappings defines how a key-value
                      mapping projected into services may be constructed.
                    properties:
                      resourceFields:
                        items:
                          properties:
                            jsonPath:
                              description: JsonPath defines where data lives in the
                                service resource.  This query must resolve to a single
                                value (e.g. not an array of values).
                              type: string
                            name:
                              description: Name of the data referred to
                              type: string
                            secret:
                              default: true
                              description: Secret indicates whether or not the mapping
                                data needs to be stored in a secret.
                              type: boolean
                          required:
                          - jsonPath
                          - name
                          type: object
                        type: array
                      secretRefFields:
                        items:
                          properties:
                            name:
                              description: Name of the data referred to
                              type: string
                            secretKey:
                              description: SecretKey defines a constant value or a
                                JsonPath used to extract from resource's specification
                                the Key to be copied from the linked secret
                              maxProperties: 1
                              minProperties: 1
                              properties:
                                constant:
                                  description: Constant is a constant value for the
                                    field
                                  type: string
                                jsonPath:
                                  description: JsonPathExpr represents a jsonPath
                                    for extracting the field
                                  type: string
                              type: object
                            secretName:
                              description: SecretName defines a constant value or
                                a JsonPath used to extract from resource's specification
                                the name of a linked secret
                              maxProperties: 1
                              minProperties: 1
                              properties:
                                constant:
                                  description: Constant is a constant value for the
                                    field
                                  type: string
                                jsonPath:
                                  description: JsonPathExpr represents a jsonPath
                                    for extracting the field
                                  type: string
                              type: object
                          required:
                          - name
                          - secretKey
                          - secretName
                          type: object
                        type: array
                    type: object
                required:
                - apiVersion
                - kind
                - serviceEndpointDefinitionMappings
                type: object
              serviceClassIdentity:
                description: ServiceClassIdentity defines a set of attributes that
                  are sufficient to identify a service class.  A ServiceClaim whose
                  ServiceClassIdentity field is a subset of a RegisteredService's
                  keys can claim that service.
                items:
                  description: ServiceClassIdentityItem defines an attribute that
                    is necessary to identify a service class.
                  properties:
                    name:
                      description: Name of the service class identity attribute.
                      type: string
                    value:
                      description: Value of the service class identity attribute.
                      type: string
                  required:
                  - name
                  - value
                  type: object
                type: array
            required:
            - resource
            - serviceClassIdentity
            type: object
          status:
            description: ServiceClassStatus defines the observed state of ServiceClass
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/part-of: primaza
  name: primaza-svc-agent
  namespace: services
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/part-of: primaza
  name: primaza:svc:leader-election
  namespace: services
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: primaza:svc:manager
  namespace: services
rules:
- apiGroups:
  - primaza.io
  resources:
  - serviceclasses
  - registeredservices
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - primaza.io
  resources:
  - serviceclasses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - update
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resourceNames:
  - primaza-svc-agent
  resources:
  - deployments
  - deployments/finalizers
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/part-of: primaza
  name: primaza:svc:leader-election
  namespace: services
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: primaza:svc:leader-election
subjects:
- kind: ServiceAccount
  name: primaza-svc-agent
  namespace: services
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: primaza
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: primaza
  name: primaza:svc:manager
  namespace: services
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: primaza:svc:manager
subjects:
- kind: ServiceAccount
  name: primaza-svc-agent
  namespace: services
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: primaza
    app.kubernetes.io/instance: webhook-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: primaza
  name: webhook-service
  namespace: services
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: primaza-svc-agent
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app.kubernetes.io/component: certificate
    app.kubernetes.io/created-by: primaza
    app.kubernetes.io/instance: serving-cert
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: certificate
    app.kubernetes.io/part-of: primaza
  name: serving-cert
  namespace: services
spec:
  dnsNames:
  - webhook-service.services.svc
  - webhook-service.services.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: selfsigned-issuer
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    app.kubernetes.io/component: certificate
    app.kubernetes.io/created-by: primaza
    app.kubernetes.io/instance: selfsigned-issuer
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: issuer
    app.kubernetes.io/part-of: primaza
  name: selfsigned-issuer
  namespace: services
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: services/serving-cert
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: primaza
    app.kubernetes.io/instance: validating-webhook-configuration
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: validatingwebhookconfiguration
    app.kubernetes.io/part-of: primaza
  name: validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: webhook-service
      namespace: services
      path: /validate-primaza-io-v1alpha1-serviceclass
  failurePolicy: Fail
  name: vserviceclass.kb.io
  rules:
  - apiGroups:
    - primaza.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - serviceclasses
  sideEffects: None
